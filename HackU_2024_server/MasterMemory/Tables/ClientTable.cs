// <auto-generated />
#pragma warning disable CS0105
using Cysharp.Threading.Tasks;
using HackU_2024_server.DataBase;
using MasterMemory.Validation;
using MasterMemory;
using MessagePack;
using System.Collections.Generic;
using System.Net.Sockets;
using System.Net.WebSockets;
using System.Net;
using System.Text;
using System;

namespace HackU_2024_server.Tables
{
   public sealed partial class ClientTable : TableBase<Client>, ITableUniqueValidate
   {
        public Func<Client, string> PrimaryKeySelector => primaryIndexSelector;
        readonly Func<Client, string> primaryIndexSelector;

        readonly Client[] secondaryIndex0;
        readonly Func<Client, int> secondaryIndex0Selector;
        readonly Client[] secondaryIndex1;
        readonly Func<Client, string> secondaryIndex1Selector;

        public ClientTable(Client[] sortedData)
            : base(sortedData)
        {
            this.primaryIndexSelector = x => x.GlobalUserId;
            this.secondaryIndex0Selector = x => x.UserID;
            this.secondaryIndex0 = CloneAndSortBy(this.secondaryIndex0Selector, System.Collections.Generic.Comparer<int>.Default);
            this.secondaryIndex1Selector = x => x.RoomName;
            this.secondaryIndex1 = CloneAndSortBy(this.secondaryIndex1Selector, System.StringComparer.Ordinal);
            OnAfterConstruct();
        }

        partial void OnAfterConstruct();

        public RangeView<Client> SortByUserID => new RangeView<Client>(secondaryIndex0, 0, secondaryIndex0.Length - 1, true);
        public RangeView<Client> SortByRoomName => new RangeView<Client>(secondaryIndex1, 0, secondaryIndex1.Length - 1, true);

        public Client FindByGlobalUserId(string key)
        {
            return FindUniqueCore(data, primaryIndexSelector, System.StringComparer.Ordinal, key, false);
        }
        
        public bool TryFindByGlobalUserId(string key, out Client result)
        {
            return TryFindUniqueCore(data, primaryIndexSelector, System.StringComparer.Ordinal, key, out result);
        }

        public Client FindClosestByGlobalUserId(string key, bool selectLower = true)
        {
            return FindUniqueClosestCore(data, primaryIndexSelector, System.StringComparer.Ordinal, key, selectLower);
        }

        public RangeView<Client> FindRangeByGlobalUserId(string min, string max, bool ascendant = true)
        {
            return FindUniqueRangeCore(data, primaryIndexSelector, System.StringComparer.Ordinal, min, max, ascendant);
        }

        public Client FindByUserID(int key)
        {
            return FindUniqueCoreInt(secondaryIndex0, secondaryIndex0Selector, System.Collections.Generic.Comparer<int>.Default, key, false);
        }
        
        public bool TryFindByUserID(int key, out Client result)
        {
            return TryFindUniqueCoreInt(secondaryIndex0, secondaryIndex0Selector, System.Collections.Generic.Comparer<int>.Default, key, out result);
        }

        public Client FindClosestByUserID(int key, bool selectLower = true)
        {
            return FindUniqueClosestCore(secondaryIndex0, secondaryIndex0Selector, System.Collections.Generic.Comparer<int>.Default, key, selectLower);
        }

        public RangeView<Client> FindRangeByUserID(int min, int max, bool ascendant = true)
        {
            return FindUniqueRangeCore(secondaryIndex0, secondaryIndex0Selector, System.Collections.Generic.Comparer<int>.Default, min, max, ascendant);
        }

        public RangeView<Client> FindByRoomName(string key)
        {
            return FindManyCore(secondaryIndex1, secondaryIndex1Selector, System.StringComparer.Ordinal, key);
        }

        public RangeView<Client> FindClosestByRoomName(string key, bool selectLower = true)
        {
            return FindManyClosestCore(secondaryIndex1, secondaryIndex1Selector, System.StringComparer.Ordinal, key, selectLower);
        }

        public RangeView<Client> FindRangeByRoomName(string min, string max, bool ascendant = true)
        {
            return FindManyRangeCore(secondaryIndex1, secondaryIndex1Selector, System.StringComparer.Ordinal, min, max, ascendant);
        }


        void ITableUniqueValidate.ValidateUnique(ValidateResult resultSet)
        {
#if !DISABLE_MASTERMEMORY_VALIDATOR

            ValidateUniqueCore(data, primaryIndexSelector, "GlobalUserId", resultSet);       
            ValidateUniqueCore(secondaryIndex0, secondaryIndex0Selector, "UserID", resultSet);       

#endif
        }

#if !DISABLE_MASTERMEMORY_METADATABASE

        public static MasterMemory.Meta.MetaTable CreateMetaTable()
        {
            return new MasterMemory.Meta.MetaTable(typeof(Client), typeof(ClientTable), "Client",
                new MasterMemory.Meta.MetaProperty[]
                {
                    new MasterMemory.Meta.MetaProperty(typeof(Client).GetProperty("GlobalUserId")),
                    new MasterMemory.Meta.MetaProperty(typeof(Client).GetProperty("UserID")),
                    new MasterMemory.Meta.MetaProperty(typeof(Client).GetProperty("RoomName")),
                    new MasterMemory.Meta.MetaProperty(typeof(Client).GetProperty("DisplayName")),
                    new MasterMemory.Meta.MetaProperty(typeof(Client).GetProperty("Socket")),
                    new MasterMemory.Meta.MetaProperty(typeof(Client).GetProperty("TcpClient")),
                    new MasterMemory.Meta.MetaProperty(typeof(Client).GetProperty("Otoshidama")),
                    new MasterMemory.Meta.MetaProperty(typeof(Client).GetProperty("Position")),
                },
                new MasterMemory.Meta.MetaIndex[]{
                    new MasterMemory.Meta.MetaIndex(new System.Reflection.PropertyInfo[] {
                        typeof(Client).GetProperty("GlobalUserId"),
                    }, true, true, System.StringComparer.Ordinal),
                    new MasterMemory.Meta.MetaIndex(new System.Reflection.PropertyInfo[] {
                        typeof(Client).GetProperty("UserID"),
                    }, false, true, System.Collections.Generic.Comparer<int>.Default),
                    new MasterMemory.Meta.MetaIndex(new System.Reflection.PropertyInfo[] {
                        typeof(Client).GetProperty("RoomName"),
                    }, false, false, System.StringComparer.Ordinal),
                });
        }

#endif
    }
}