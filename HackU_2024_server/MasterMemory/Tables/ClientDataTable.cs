// <auto-generated />
#pragma warning disable CS0105
using HackU_2024_server.DataBase;
using MasterMemory.Validation;
using MasterMemory;
using MessagePack;
using System.Collections.Generic;
using System.Net.WebSockets;
using System.Net;
using System;

namespace HackU_2024_server.Tables
{
   public sealed partial class ClientDataTable : TableBase<ClientData>, ITableUniqueValidate
   {
        public Func<ClientData, string> PrimaryKeySelector => primaryIndexSelector;
        readonly Func<ClientData, string> primaryIndexSelector;

        readonly ClientData[] secondaryIndex0;
        readonly Func<ClientData, int> secondaryIndex0Selector;
        readonly ClientData[] secondaryIndex1;
        readonly Func<ClientData, string> secondaryIndex1Selector;

        public ClientDataTable(ClientData[] sortedData)
            : base(sortedData)
        {
            this.primaryIndexSelector = x => x.GlobalUserId;
            this.secondaryIndex0Selector = x => x.UserID;
            this.secondaryIndex0 = CloneAndSortBy(this.secondaryIndex0Selector, System.Collections.Generic.Comparer<int>.Default);
            this.secondaryIndex1Selector = x => x.RoomName;
            this.secondaryIndex1 = CloneAndSortBy(this.secondaryIndex1Selector, System.StringComparer.Ordinal);
            OnAfterConstruct();
        }

        partial void OnAfterConstruct();

        public RangeView<ClientData> SortByUserID => new RangeView<ClientData>(secondaryIndex0, 0, secondaryIndex0.Length - 1, true);
        public RangeView<ClientData> SortByRoomName => new RangeView<ClientData>(secondaryIndex1, 0, secondaryIndex1.Length - 1, true);

        public ClientData FindByGlobalUserId(string key)
        {
            return FindUniqueCore(data, primaryIndexSelector, System.StringComparer.Ordinal, key, false);
        }
        
        public bool TryFindByGlobalUserId(string key, out ClientData result)
        {
            return TryFindUniqueCore(data, primaryIndexSelector, System.StringComparer.Ordinal, key, out result);
        }

        public ClientData FindClosestByGlobalUserId(string key, bool selectLower = true)
        {
            return FindUniqueClosestCore(data, primaryIndexSelector, System.StringComparer.Ordinal, key, selectLower);
        }

        public RangeView<ClientData> FindRangeByGlobalUserId(string min, string max, bool ascendant = true)
        {
            return FindUniqueRangeCore(data, primaryIndexSelector, System.StringComparer.Ordinal, min, max, ascendant);
        }

        public RangeView<ClientData> FindByUserID(int key)
        {
            return FindManyCore(secondaryIndex0, secondaryIndex0Selector, System.Collections.Generic.Comparer<int>.Default, key);
        }

        public RangeView<ClientData> FindClosestByUserID(int key, bool selectLower = true)
        {
            return FindManyClosestCore(secondaryIndex0, secondaryIndex0Selector, System.Collections.Generic.Comparer<int>.Default, key, selectLower);
        }

        public RangeView<ClientData> FindRangeByUserID(int min, int max, bool ascendant = true)
        {
            return FindManyRangeCore(secondaryIndex0, secondaryIndex0Selector, System.Collections.Generic.Comparer<int>.Default, min, max, ascendant);
        }

        public RangeView<ClientData> FindByRoomName(string key)
        {
            return FindManyCore(secondaryIndex1, secondaryIndex1Selector, System.StringComparer.Ordinal, key);
        }

        public RangeView<ClientData> FindClosestByRoomName(string key, bool selectLower = true)
        {
            return FindManyClosestCore(secondaryIndex1, secondaryIndex1Selector, System.StringComparer.Ordinal, key, selectLower);
        }

        public RangeView<ClientData> FindRangeByRoomName(string min, string max, bool ascendant = true)
        {
            return FindManyRangeCore(secondaryIndex1, secondaryIndex1Selector, System.StringComparer.Ordinal, min, max, ascendant);
        }


        void ITableUniqueValidate.ValidateUnique(ValidateResult resultSet)
        {
#if !DISABLE_MASTERMEMORY_VALIDATOR

            ValidateUniqueCore(data, primaryIndexSelector, "GlobalUserId", resultSet);       

#endif
        }

#if !DISABLE_MASTERMEMORY_METADATABASE

        public static MasterMemory.Meta.MetaTable CreateMetaTable()
        {
            return new MasterMemory.Meta.MetaTable(typeof(ClientData), typeof(ClientDataTable), "ClientData",
                new MasterMemory.Meta.MetaProperty[]
                {
                    new MasterMemory.Meta.MetaProperty(typeof(ClientData).GetProperty("GlobalUserId")),
                    new MasterMemory.Meta.MetaProperty(typeof(ClientData).GetProperty("UserID")),
                    new MasterMemory.Meta.MetaProperty(typeof(ClientData).GetProperty("RoomName")),
                    new MasterMemory.Meta.MetaProperty(typeof(ClientData).GetProperty("DisplayName")),
                    new MasterMemory.Meta.MetaProperty(typeof(ClientData).GetProperty("Port")),
                    new MasterMemory.Meta.MetaProperty(typeof(ClientData).GetProperty("Socket")),
                },
                new MasterMemory.Meta.MetaIndex[]{
                    new MasterMemory.Meta.MetaIndex(new System.Reflection.PropertyInfo[] {
                        typeof(ClientData).GetProperty("GlobalUserId"),
                    }, true, true, System.StringComparer.Ordinal),
                    new MasterMemory.Meta.MetaIndex(new System.Reflection.PropertyInfo[] {
                        typeof(ClientData).GetProperty("UserID"),
                    }, false, false, System.Collections.Generic.Comparer<int>.Default),
                    new MasterMemory.Meta.MetaIndex(new System.Reflection.PropertyInfo[] {
                        typeof(ClientData).GetProperty("RoomName"),
                    }, false, false, System.StringComparer.Ordinal),
                });
        }

#endif
    }
}