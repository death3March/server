// <auto-generated />
#pragma warning disable CS0105
using Cysharp.Threading.Tasks;
using HackU_2024_server.DataBase;
using MasterMemory.Validation;
using MasterMemory;
using MessagePack;
using System.Collections.Generic;
using System.Net.Sockets;
using System.Net.WebSockets;
using System.Security.Cryptography;
using System.Text.RegularExpressions;
using System.Text;
using System;
using HackU_2024_server.Tables;

namespace HackU_2024_server
{
   public sealed class ImmutableBuilder : ImmutableBuilderBase
   {
        MemoryDatabase memory;

        public ImmutableBuilder(MemoryDatabase memory)
        {
            this.memory = memory;
        }

        public MemoryDatabase Build()
        {
            return memory;
        }

        public void ReplaceAll(System.Collections.Generic.IList<Client> data)
        {
            var newData = CloneAndSortBy(data, x => x.GlobalUserId, System.StringComparer.Ordinal);
            var table = new ClientTable(newData);
            memory = new MemoryDatabase(
                table,
                memory.RoomTable
            
            );
        }

        public void RemoveClient(string[] keys)
        {
            var data = RemoveCore(memory.ClientTable.GetRawDataUnsafe(), keys, x => x.GlobalUserId, System.StringComparer.Ordinal);
            var newData = CloneAndSortBy(data, x => x.GlobalUserId, System.StringComparer.Ordinal);
            var table = new ClientTable(newData);
            memory = new MemoryDatabase(
                table,
                memory.RoomTable
            
            );
        }

        public void Diff(Client[] addOrReplaceData)
        {
            var data = DiffCore(memory.ClientTable.GetRawDataUnsafe(), addOrReplaceData, x => x.GlobalUserId, System.StringComparer.Ordinal);
            var newData = CloneAndSortBy(data, x => x.GlobalUserId, System.StringComparer.Ordinal);
            var table = new ClientTable(newData);
            memory = new MemoryDatabase(
                table,
                memory.RoomTable
            
            );
        }

        public void ReplaceAll(System.Collections.Generic.IList<Room> data)
        {
            var newData = CloneAndSortBy(data, x => x.RoomName, System.StringComparer.Ordinal);
            var table = new RoomTable(newData);
            memory = new MemoryDatabase(
                memory.ClientTable,
                table
            
            );
        }

        public void RemoveRoom(string[] keys)
        {
            var data = RemoveCore(memory.RoomTable.GetRawDataUnsafe(), keys, x => x.RoomName, System.StringComparer.Ordinal);
            var newData = CloneAndSortBy(data, x => x.RoomName, System.StringComparer.Ordinal);
            var table = new RoomTable(newData);
            memory = new MemoryDatabase(
                memory.ClientTable,
                table
            
            );
        }

        public void Diff(Room[] addOrReplaceData)
        {
            var data = DiffCore(memory.RoomTable.GetRawDataUnsafe(), addOrReplaceData, x => x.RoomName, System.StringComparer.Ordinal);
            var newData = CloneAndSortBy(data, x => x.RoomName, System.StringComparer.Ordinal);
            var table = new RoomTable(newData);
            memory = new MemoryDatabase(
                memory.ClientTable,
                table
            
            );
        }

    }
}